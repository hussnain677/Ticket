import React from 'react';
import { ViewStyle, StyleProp } from 'react-native';
import { State as GestureState, PanGestureHandlerGestureEvent, TapGestureHandlerGestureEvent } from 'react-native-gesture-handler';
import Animated from 'react-native-reanimated';
export declare type HSV = {
    readonly h: number;
    readonly s: number;
    readonly v: number;
};
declare type Props = {
    readonly style: StyleProp<ViewStyle>;
    readonly snapToCenter?: number;
    readonly onColorChangeComplete?: (color: HSV) => void;
    readonly onColorChange?: (color: HSV) => void;
    readonly value?: Animated.Node<number>;
    readonly valueGestureState?: Animated.Node<GestureState>;
    readonly thumbRadius?: number;
    readonly initialHue?: number;
    readonly initialSaturation?: number;
};
declare type State = {
    readonly hue?: Animated.Node<number>;
    readonly saturation?: Animated.Node<number>;
    readonly side?: number;
    readonly posX?: Animated.Node<number>;
    readonly posY?: Animated.Node<number>;
    readonly startX?: Animated.Node<number>;
    readonly startY?: Animated.Node<number>;
    readonly translateX?: Animated.Node<number>;
    readonly translateY?: Animated.Node<number>;
    readonly thumbColor?: Animated.Node<string>;
    readonly wheelOpacity?: Animated.Node<number>;
    readonly panGestureEvent?: (event: PanGestureHandlerGestureEvent | TapGestureHandlerGestureEvent) => void;
    readonly gestureState?: Animated.Node<GestureState>;
    readonly codeKey?: number;
};
export declare class HueSaturationWheel extends React.PureComponent<Props, State> {
    static defaultProps: Partial<Props>;
    constructor(props: Props);
    static isGestureStartedInsideCircle(gestureState: Animated.Node<GestureState>, startX: Animated.Node<number>, startY: Animated.Node<number>, thumbSize: number, side: number): Animated.Node<0 | 1>;
    private static center;
    private static toCartesian;
    private static state;
    private static side;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    render(): JSX.Element;
    private colorChangeComplete;
    private colorChange;
    private layout;
}
export {};
